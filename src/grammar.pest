template = { SOI ~ items ~ EOI }
items = _{ item ~ items? }
item = _{ tag | static | trimmed_ws_before | collapsed_ws_before }

// All tags should start with open_delim.
// Check writs first since they're most likely to appear.
tag = { &open_delim ~ (writ | statement | comment) }

static = @{ static_ch+ }
static_ch = _{ (!ws ~ !tag ~ ANY) | (ws ~ !(open ~ adjust_ws_before)) }
trimmed_ws_before = _{ ws ~ &(open ~ trim_ws) }
collapsed_ws_before = _{ collapsed_ws ~ &(open ~ collapse_ws_before) }

trimmed_ws = _{ ws ~ &(open ~ trim_ws) }
collapsed_ws = { whitespace }

open = { open_delim ~ type_delim }
open_delim = _{ "{" }
close_delim = _{ "}" }
type_delim = { writ_delim | statement_delim | comment_delim }
invalid = { ANY }

writ = { writ_open ~ adjust_ws_before? ~ (!writ_close ~ writ_item)+ ~ writ_close? }
writ_item = _{ ws | expression | invalid }
writ_open = _{ open_delim ~ writ_delim }
writ_close = {
    (trim_ws ~ writ_close_delims ~ trimmed_ws?)
    | (collapse_ws_after ~ writ_close_delims ~ collapsed_ws?)
    | writ_close_delims
}
writ_close_delims = _{ writ_delim ~ close_delim }
writ_delim = _{ ":" }

statement = { statement_open ~ adjust_ws_before? ~ (!statement_close ~ statement_item)+ ~ statement_close? }
statement_item = _{ ws | literal | identifier | punctuation | delimiter | invalid }
statement_open = _{ open_delim ~ statement_delim }
statement_close = {
    (trim_ws ~ statement_close_delims ~ trimmed_ws?)
    | (collapse_ws_after ~ statement_close_delims ~ collapsed_ws?)
    | statement_close_delims
}
statement_close_delims = _{ statement_delim ~ close_delim }
statement_delim = _{ "%" }

comment = { comment_open ~ adjust_ws_before? ~ (!comment_close ~ comment_item)+ ~ comment_close? }
comment_item = _{ ws | expression | invalid }
comment_open = _{ open_delim ~ comment_delim }
comment_close = {
    (trim_ws ~ comment_close_delims ~ trimmed_ws?)
    | (collapse_ws_after ~ comment_close_delims ~ collapsed_ws?)
    | comment_close_delims
}
comment_close_delims = _{ comment_delim ~ close_delim }
comment_delim = _{ "#" }

adjust_ws_before = _{ trim_ws | collapse_ws_before }
adjust_ws_after = _{ trim_ws | collapse_ws_after }
trim_ws = _{ "-" }
collapse_ws = _{ "_" }
collapse_ws_before = _{ collapse_ws }
collapse_ws_after = _{ collapse_ws }
whitespace = _{ (" " | "\t" | NEWLINE)+ }
ws = _{ whitespace }


// These items are influenced by rust

expression = _{ literal | identifier | punctuation | delimiter }

// https://doc.rust-lang.org/reference/tokens.html
literal = _{ _character | string | raw_string | bool | byte | byte_string | raw_byte_string | number }
// Optional closing ' so unclosed quotes report error properly
_character = _{ "'" ~ !"'" ~ character ~ (!"'" ~ invalid)* ~ "'"? }
character = { ("\\'" | ANY) }
// Optional closing " so unclosed quotes report error properly
string = { "\"" ~ (!"\"" ~ ("\\\"" | ANY))* ~ "\""? }
// Optional closing "### so unclosed quotes report error properly
raw_string = {
    "r" ~ PUSH("#"*) ~ "\""
    ~ (!("\"" ~ PEEK) ~ ANY)*
    ~ ("\"" ~ POP)?
}
bool = { "true" | "false" }
ascii = _{ '\u{00}'..'\u{7F}' }
byte = {
    "b'"
    ~ (
        // any ASCII (i.e. 0x00 to 0x7F), except ', \, \n, \r or \t
        (!("'" | "\\" | "\n" | "\r" | "\t") ~ ascii)
        | byte_escape
    )?
    ~ (!"'" ~ invalid)*
    // Optional closing ' so unclosed quotes report error properly
    ~ "'"?
}
byte_string = {
    "b\""
    ~ (
        // any ASCII (i.e 0x00 to 0x7F), except ", \ and IsolatedCR
        (!("\"" | "\\" | "\n" | "\r" | "\t") ~ ascii)
        | byte_escape
        | "\\\n" // string_continue (escaped newline)
        | (!"\"" ~ invalid)
    )*
    // Optional closing " so unclosed quotes report error properly
    ~ "\""?
}
// Optional closing "### so unclosed quotes report error properly
raw_byte_string = {
    "r" ~ PUSH("#"*) ~ "\""
    ~ (!("\"" ~ PEEK) ~ ascii)*
    ~ ("\"" ~ POP)?
}
byte_escape = {
    "\\x" ~ ('0'..'9' | 'a'..'f' | 'A'..'F'){2}
    | "\\n" | "\\r" | "\\t" | "\\\\" | "\\0"
}
number = {
    (decimal | bin_number | octal | hex_number)
    ~ (("u" | "i") ~ ("8" | "16" | "32" | "64" | "128" | "size"))?
}
decimal = { '0'..'9' ~ ('0'..'9' | "_")* }
bin_number = { "0b" ~ ('0'..'1' | "_")* ~ '0'..'1' ~ ('0'..'1' | "_")* }
octal = { "0o" ~ ('0'..'7' | "_")* ~ '0'..'7' ~ ('0'..'7' | "_")* }
hex_number = { "0x" ~ (hex_digit | "_")* ~ hex_digit ~ (hex_digit | "_")* }
hex_digit = { '0'..'9' | 'a'..'f' | 'A'..'F' }

// https://doc.rust-lang.org/reference/identifiers.html
// Simplified to alpha/numeral for now
identifier = @{ "r#"? ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")+ }

// https://doc.rust-lang.org/reference/tokens.html#punctuation
punctuation = {
    "+" | "-" | "*" | "/" | "%" | "^" | "!" | "&" | "|" | "&&" | "||"
    | "<<" | ">>" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&="
    | "|=" | "<<=" | ">>=" | "=" | "==" | "!=" | ">" | "<" | ">="
    | "<=" | "@" | "_" | "." | ".." | "..." | "..=" | "," | ";" | ":"
    | "::" | "->" | "=>" | "#" | "$" | "?"
}

// https://doc.rust-lang.org/reference/tokens.html#delimiters
delimiter = { "{" | "}" | "[" | "]" | "(" | ")" }
